using System.ComponentModel;
using System;
using System.Drawing;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI.Extensions;

public class PayoutCalculation : MonoBehaviour
{
    [SerializeField]
    private int x_Distance;
    [SerializeField]
    private int y_Distance;

    [SerializeField]
    private Transform LineContainer;
    [SerializeField]
    private GameObject Line_Prefab;

    [SerializeField]
    private Vector2 InitialLinePosition = new Vector2(-315, 100);

    GameObject TempObj = null;

    //generate lines at runtime accordingly
    // internal void GeneratePayoutLinesBackend(List<int> y_index, int Count, bool isStatic = false)
    // {
    //     GameObject MyLineObj = Instantiate(Line_Prefab, LineContainer);
    //     MyLineObj.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);
    //     UILineRenderer MyLine = MyLineObj.GetComponent<UILineRenderer>();
    //     for (int i = 0; i < Count; i++)
    //     {
    //         var points = new Vector2() { x = i * x_Distance, y = y_index[i] * -y_Distance };
    //         var pointlist = new List<Vector2>(MyLine.Points);
    //         pointlist.Add(points);
    //         MyLine.Points = pointlist.ToArray();
    //     }
    //     var newpointlist = new List<Vector2>(MyLine.Points);
    //     newpointlist.RemoveAt(0);
    //     MyLine.Points = newpointlist.ToArray();

    //     if(isStatic)
    //     {
    //         TempObj = MyLineObj;
    //     }
    // }


    internal void GeneratePayoutLinesBackend(List<int> y_index, bool isStatic = false)
    {
        GameObject MyLineObj = Instantiate(Line_Prefab, LineContainer);
        MyLineObj.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);

        UILineRenderer MyLine = MyLineObj.GetComponent<UILineRenderer>();

       // List<Vector2> pointlist = new List<Vector2>();
       List<Vector2> pointlist = new List<Vector2>();

    int count = y_index.Count;

    // --- Add starting buffer point ---
    if (count > 0)
    {
        // Project back one x step before the first column
        float startX = -x_Distance/2;
        float startY = y_index[0] * -y_Distance;
        pointlist.Add(new Vector2(startX, startY));
    }

    // --- Add main line points ---
    for (int i = 0; i < count; i++)
    {
        float x = i * x_Distance;
        float y = y_index[i] * -y_Distance;
        pointlist.Add(new Vector2(x, y));
    }

    // --- Add ending buffer point ---
    if (count > 0)
    {
        float endX = 25+(count * x_Distance)-x_Distance/2;
        float endY = y_index[count - 1] * -y_Distance;
        pointlist.Add(new Vector2(endX, endY));
    }

    MyLine.Points = pointlist.ToArray();
        // var newpointlist = new List<Vector2>(MyLine.Points);
        // newpointlist.RemoveAt(0);
        // MyLine.Points = newpointlist.ToArray();

        if (isStatic)
        {
            TempObj = MyLineObj;
        }
    }


    //delete the line generated by button hover
    internal void ResetStaticLine()
    {
        if (TempObj != null)
        {
            Destroy(TempObj);
            TempObj = null;
        }
    }

    //delete all lines
    internal void ResetLines()
    {
        foreach (Transform child in LineContainer)
        {
            Destroy(child.gameObject);
        }
    }
}
